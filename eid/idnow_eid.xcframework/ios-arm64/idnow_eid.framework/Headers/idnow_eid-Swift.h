#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef IDNOW_EID_SWIFT_H
#define IDNOW_EID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="idnow_eid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@protocol IDnowLoggerProtocol;

SWIFT_CLASS("_TtC9idnow_eid7IDN_eID")
@interface IDN_eID : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isDeviceNFCSupported;)
+ (BOOL)isDeviceNFCSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <IDnowLoggerProtocol> _Nullable internalLogger;)
+ (id <IDnowLoggerProtocol> _Nullable)internalLogger SWIFT_WARN_UNUSED_RESULT;
+ (void)setInternalLogger:(id <IDnowLoggerProtocol> _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSString;
enum IDN_eIDAppearanceMode : NSInteger;

SWIFT_CLASS("_TtC9idnow_eid17IDN_eIDAppearance")
@interface IDN_eIDAppearance : NSObject
/// <ul>
///   <li>
///     Optional color, that replaces the default text color.
///   </li>
///   <li>
///     Default: A nearly black color
///   </li>
///   <li>
///     Recommendation: Should be some kind of a dark color that does not collide with white color.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull defaultTextColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryTextColor;
/// <ul>
///   <li>
///     Optional color, that replaces the default brand color.
///   </li>
///   <li>
///     Default: IDnow orange color.
///   </li>
///   <li>
///     Recommendation: Should be a color that does not collide with white color.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull primaryBrandColor;
@property (nonatomic, strong) UIColor * _Nonnull primaryVariantColor;
/// <ul>
///   <li>
///     Optional color, that replaces the proceed button background color.
///   </li>
///   <li>
///     Default value: An orange color
///   </li>
///   <li>
///     Recommendation: Should be a color that does not collide with white font color (e.g. orange, blue, red etc.).
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull proceedButtonBackgroundColor;
/// <ul>
///   <li>
///     Optional color, that replaces the proceed button text color.
///   </li>
///   <li>
///     Default value: White color
///   </li>
///   <li>
///     Recommendation: Should be a color that does not collide with proceedButtonBackgroundColor.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull proceedButtonTextColor;
/// <ul>
///   <li>
///     Optional color, that replaces the default color of textfield backgrounds and borders
///   </li>
///   <li>
///     Default: defaultTextColor
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull textFieldColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// <ul>
///   <li>
///     Default: false - Underline all button titles
///   </li>
///   <li>
///     Set this to true in order to underline button title text
///   </li>
/// </ul>
@property (nonatomic) BOOL underlineButtonTitles;
/// <ul>
///   <li>
///     Default: YES - Make button titles bold
///   </li>
///   <li>
///     Set this to NO in order to use normal font weight in button titles
///   </li>
/// </ul>
@property (nonatomic) BOOL boldButtonTitles;
/// <ul>
///   <li>
///     Optional corner radius for buttons
///   </li>
///   <li>
///     Default: 4.0
///   </li>
/// </ul>
@property (nonatomic) CGFloat cornerRadius;
/// If set to <code>true</code>, the new IDNow branding will be used
/// By default the value of this property is <code>true</code>
@property (nonatomic) BOOL usedNewBrand;
/// <ul>
///   <li>
///     An optional font name that can be used to replace the bold font used by the SDK.
///   </li>
///   <li>
///     Default: System bold Font
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable fontNameBold;
/// <ul>
///   <li>
///     An optional font name that can be used to replace the regular font used by the SDK.
///   </li>
///   <li>
///     Default: System regular Font
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable fontNameRegular;
/// <ul>
///   <li>
///     An optional font name that can be used to replace the medium font used by the SDK.
///   </li>
///   <li>
///     Default: System medium Font
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable fontNameMedium;
/// <ul>
///   <li>
///     An optional font name that can be used to replace the light font used by the SDK.
///   </li>
///   <li>
///     Default: System light Font
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable fontNameLight;
/// <ul>
///   <li>
///     background color for pin cells
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nonnull backgroundCellsColor;
@property (nonatomic, strong) UIColor * _Nonnull primarySubstitutionColor;
@property (nonatomic, copy) NSString * _Nullable userInterfaceLanguage;
@property (nonatomic) enum IDN_eIDAppearanceMode mode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IDN_eIDAppearance * _Nonnull shared;)
+ (IDN_eIDAppearance * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IDN_eIDAppearanceMode, open) {
  IDN_eIDAppearanceModeLight = 0,
  IDN_eIDAppearanceModeDark = 1,
  IDN_eIDAppearanceModeSystem = 2,
};


SWIFT_CLASS("_TtC9idnow_eid13IDN_eIDConfig")
@interface IDN_eIDConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IDN_eIDConfig * _Nonnull shared;)
+ (IDN_eIDConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL enableTnC;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IDN_eIDError, open) {
  IDN_eIDErrorUnsupportedNFC = 0,
  IDN_eIDErrorUserCancelled = 1,
  IDN_eIDErrorInvalidToken = 2,
  IDN_eIDErrorPreconditionFailed = 3,
  IDN_eIDErrorTokenUnsupportElectronicCard = 4,
  IDN_eIDErrorUnifiedIdentAnotherMethod = 5,
  IDN_eIDErrorUnknown = 6,
};
static NSString * _Nonnull const IDN_eIDErrorDomain = @"idnow_eid.IDN_eIDError";

typedef SWIFT_ENUM(NSInteger, IDN_eIDNetworkError, open) {
  IDN_eIDNetworkErrorRequestTimeout = 0,
  IDN_eIDNetworkErrorReturnedDataWrongFormat = 1,
  IDN_eIDNetworkErrorServerError = 2,
  IDN_eIDNetworkErrorBadRequest = 3,
  IDN_eIDNetworkErrorNoJSONData = 4,
  IDN_eIDNetworkErrorNotFound = 5,
  IDN_eIDNetworkErrorUnExpected = 6,
  IDN_eIDNetworkErrorUnknown = 7,
  IDN_eIDNetworkErrorSigningTimeout = 8,
  IDN_eIDNetworkErrorTechnicalError = 9,
};
static NSString * _Nonnull const IDN_eIDNetworkErrorDomain = @"idnow_eid.IDN_eIDNetworkError";

@class UIViewController;

SWIFT_CLASS("_TtC9idnow_eid13IDN_eIDRouter")
@interface IDN_eIDRouter : NSObject
- (nonnull instancetype)initWithController:(UIViewController * _Nonnull)controller token:(NSString * _Nonnull)token completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
- (void)present:(void (^ _Nullable)(BOOL, BOOL, NSError * _Nullable))completionHandler;
- (void)startUnifiedEIDWithShowPopUp:(BOOL)showPopUp unifiedToken:(NSString * _Nullable)unifiedToken completionHandler:(void (^ _Nullable)(BOOL, BOOL, NSError * _Nullable))completionHandler;
- (void)startWithoutChooserPage:(void (^ _Nullable)(BOOL, BOOL, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC9idnow_eid20IDnowCountryProvider")
@interface IDnowCountryProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP9idnow_eid19IDnowLoggerProtocol_")
@protocol IDnowLoggerProtocol
- (void)setConfigWithInteralToken:(NSString * _Nonnull)token shortName:(NSString * _Nonnull)shortName sdkVersion:(NSString * _Nonnull)sdkVersion info:(NSDictionary<NSString *, id> * _Nonnull)info;
- (void)startSession;
- (void)endSession;
- (void)startEvent:(NSString * _Nonnull)name;
- (void)endEvent:(NSString * _Nonnull)name;
- (void)recordEvent:(NSString * _Nonnull)name segmentation:(NSDictionary<NSString *, NSString *> * _Nullable)segmentation;
- (void)recordView:(NSString * _Nonnull)name segmentation:(NSDictionary<NSString *, NSString *> * _Nullable)segmentation;
@end

typedef SWIFT_ENUM(NSInteger, IDnowParametersEncoding, open) {
  IDnowParametersEncodingUrl = 0,
  IDnowParametersEncodingJson = 1,
};


SWIFT_CLASS("_TtC9idnow_eid22IDnowRegexPhoneManager")
@interface IDnowRegexPhoneManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9idnow_eid23IDnowURLSessionProvider")
@interface IDnowURLSessionProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end















#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
